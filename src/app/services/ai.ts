import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { delay } from 'rxjs/operators';
import { Task, ActivityLog } from '../models/task.model';
import { KanbanService } from './kanban';

@Injectable({
  providedIn: 'root'
})
export class AiService {

  constructor(private kanbanService: KanbanService) { }

  generateTask(prompt: string): Observable<Task> {
    const now = new Date();

    // Simulate AI task generation
    const generatedTask: Task = {
      id: this.kanbanService.generateId(),
      title: this.generateTitle(prompt),
      description: this.generateDescription(prompt),
      status: 'backlog',
      assignee: this.suggestAssignee(prompt),
      priority: this.suggestPriority(prompt),
      likes: 0,
      comments: [],
      created_at: now, // ✅ fixed property name
      activityLog: [
        {
          id: this.kanbanService.generateId(),
          timestamp: now,
          details: 'Task generated by AI',
          created_at: now // ✅ required
        } as ActivityLog
      ]
    };

    // Simulate API delay
    return of(generatedTask).pipe(delay(1500));
  }

  private generateTitle(prompt: string): string {
    const words = prompt.split(' ');
    return words.length > 6 ? words.slice(0, 6).join(' ') + '...' : prompt;
  }

  private generateDescription(prompt: string): string {
    return `${prompt}\n\nThis task was automatically generated by AI. Please review and update the details as needed.`;
  }

  private suggestAssignee(prompt: string): string {
    const assignees = ['John Doe', 'Jane Smith', 'Mike Johnson', 'Sarah Williams', 'Tom Brown'];
    if (prompt.toLowerCase().includes('design') || prompt.toLowerCase().includes('ui')) return 'Jane Smith';
    if (prompt.toLowerCase().includes('backend') || prompt.toLowerCase().includes('api')) return 'Mike Johnson';
    if (prompt.toLowerCase().includes('test')) return 'Sarah Williams';
    return assignees[Math.floor(Math.random() * assignees.length)];
  }

  private suggestPriority(prompt: string): 'low' | 'medium' | 'high' {
    const lowerPrompt = prompt.toLowerCase();
    if (lowerPrompt.includes('urgent') || lowerPrompt.includes('critical') || lowerPrompt.includes('important')) return 'high';
    if (lowerPrompt.includes('minor') || lowerPrompt.includes('small')) return 'low';
    return 'medium';
  }
}
